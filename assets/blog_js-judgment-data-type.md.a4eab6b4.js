import{_ as n,c as s,o as a,a as t}from"./app.a7b90192.js";const y='{"title":"JavaScript \u5224\u65AD\u6570\u636E\u7C7B\u578B","description":"","frontmatter":{"title":"JavaScript \u5224\u65AD\u6570\u636E\u7C7B\u578B","date":"2021/08/09 13:30","categories":["\u6280\u672F\u7B14\u8BB0"],"tags":["\u524D\u7AEF","JavaScript"]},"headers":[{"level":2,"title":"typeof","slug":"typeof"},{"level":2,"title":"instanceof","slug":"instanceof"},{"level":2,"title":"constructor","slug":"constructor"},{"level":2,"title":"Object.prototype.toString.call","slug":"object-prototype-tostring-call"}],"relativePath":"blog/js-judgment-data-type.md","lastUpdated":1641374284244}',o={},p=t(`<h1 id="javascript-\u4E2D\u6570\u636E\u7C7B\u578B" tabindex="-1">JavaScript \u4E2D\u6570\u636E\u7C7B\u578B <a class="header-anchor" href="#javascript-\u4E2D\u6570\u636E\u7C7B\u578B" aria-hidden="true">#</a></h1><ul><li>\u503C\u7C7B\u578B(\u57FA\u672C\u7C7B\u578B)\uFF1A<code>String</code>\u3001<code>Number</code>\u3001<code>BigInt</code>\u3001<code>Boolean</code>\u3001<code>Null</code>\u3001<code>Undefined</code>\u3001<code>Symbol</code>\u3002</li><li>\u5F15\u7528\u6570\u636E\u7C7B\u578B\uFF1A<code>Object</code>\u3001<code>Array</code>\u3001<code>Function</code>\u3002</li></ul><h1 id="\u5224\u65AD\u6570\u636E\u7C7B\u578B" tabindex="-1">\u5224\u65AD\u6570\u636E\u7C7B\u578B <a class="header-anchor" href="#\u5224\u65AD\u6570\u636E\u7C7B\u578B" aria-hidden="true">#</a></h1><p>\u5047\u8BBE\u6709\u4EE5\u4E0B\u6570\u636E\u9700\u8981\u533A\u5206</p><div class="language-jsx"><pre><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">let</span> bi <span class="token operator">=</span> <span class="token number">1n</span>
<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">let</span> nul <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">let</span> und <span class="token operator">=</span> <span class="token keyword">undefined</span>
<span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> <span class="token function-variable function">fuc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Student</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>\u5224\u65AD\u7684\u65B9\u6CD5\u5F88\u591A\uFF0C\u6309\u9700\u4F7F\u7528\uFF1A</p><h2 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-hidden="true">#</a></h2><p>\u4E0D\u80FD\u5224\u65AD <code>Null</code>\u3001<code>Object</code>\u3001<code>Array</code> \u548C\u4E0D\u540C\u5B9E\u4F8B</p><div class="language-jsx"><pre><code><span class="token keyword">typeof</span> str <span class="token comment">// &quot;string&quot;</span>
<span class="token keyword">typeof</span> num <span class="token comment">// &quot;number&quot;</span>
<span class="token keyword">typeof</span> bi <span class="token comment">// &quot;bigint&quot;</span>
<span class="token keyword">typeof</span> bool <span class="token comment">// &quot;boolean&quot;</span>
<span class="token keyword">typeof</span> nul <span class="token comment">// &quot;object&quot;</span>
<span class="token keyword">typeof</span> und <span class="token comment">// &quot;undefined&quot;</span>
<span class="token keyword">typeof</span> sym <span class="token comment">// &quot;symbol&quot;</span>
<span class="token keyword">typeof</span> obj <span class="token comment">// &quot;object&quot;</span>
<span class="token keyword">typeof</span> arr <span class="token comment">// &quot;object&quot;</span>
<span class="token keyword">typeof</span> fuc <span class="token comment">// &quot;function&quot;</span>

<span class="token keyword">typeof</span> person <span class="token comment">// &quot;object&quot;</span>
<span class="token keyword">typeof</span> student <span class="token comment">// &quot;object&quot;</span>
</code></pre></div><h2 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-hidden="true">#</a></h2><p>\u4E0D\u80FD\u5224\u65AD <code>null</code>\u3001<code>undefined</code>\u3001\u4E0D\u662F\u7528 <code>new</code> \u58F0\u660E\u7684\u57FA\u672C\u7C7B\u578B\u548C\u4E0D\u540C\u5B9E\u4F8B</p><div class="language-jsx"><pre><code>str <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// false</span>
num <span class="token keyword">instanceof</span> <span class="token class-name">Number</span> <span class="token comment">// false</span>
bi <span class="token keyword">instanceof</span> <span class="token class-name">BigInt</span> <span class="token comment">// false</span>
bool <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span> <span class="token comment">// false</span>
sym <span class="token keyword">instanceof</span> <span class="token class-name">Symbol</span> <span class="token comment">// false</span>
obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>
arr <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span>
fuc <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token comment">// true</span>

<span class="token keyword">let</span> strNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
strNew <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token comment">// true</span>
<span class="token keyword">let</span> numNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
numNew <span class="token keyword">instanceof</span> <span class="token class-name">Number</span> <span class="token comment">// true</span>
<span class="token keyword">let</span> boolNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
boolNew <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span> <span class="token comment">// true</span>

person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment">// true</span>

student <span class="token keyword">instanceof</span> <span class="token class-name">Student</span> <span class="token comment">// true</span>
student <span class="token keyword">instanceof</span> <span class="token class-name">Person</span> <span class="token comment">// true</span>
</code></pre></div><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-hidden="true">#</a></h2><p>\u4E0D\u80FD\u5224\u65AD <code>null</code>\u3001<code>undefined</code>\uFF0C\u5E76\u4E14\u5B83\u662F\u4E0D\u5B89\u5168\u7684\uFF0C<code>contructor</code> \u7684\u6307\u5411\u53EF\u4EE5\u88AB\u7BE1\u6539\u3002</p><div class="language-js"><pre><code>str<span class="token punctuation">.</span>constructor <span class="token operator">===</span> String <span class="token comment">// true</span>
num<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Number <span class="token comment">// true</span>
bi<span class="token punctuation">.</span>constructor <span class="token operator">===</span> BigInt <span class="token comment">// true</span>
bool<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Boolean <span class="token comment">// true</span>
obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object <span class="token comment">// true</span>
arr<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token comment">// true</span>
fuc<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Function <span class="token comment">// true</span>

<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
person<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person <span class="token comment">// true</span>

student<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Student <span class="token comment">// false</span>
student<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person <span class="token comment">// true</span>
</code></pre></div><h2 id="object-prototype-tostring-call" tabindex="-1">Object.prototype.toString.call <a class="header-anchor" href="#object-prototype-tostring-call" aria-hidden="true">#</a></h2><p>\u4E0D\u80FD\u533A\u5206\u4E0D\u540C\u5B9E\u4F8B</p><div class="language-js"><pre><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">// &quot;[object String]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Number]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span> <span class="token comment">// &quot;[object BigInt]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Boolean]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>nul<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Null]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>und<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Undefined]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Symbol]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Array]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fuc<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Function]&quot;</span>

<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span> <span class="token comment">// &quot;[object Object]&quot;</span>
</code></pre></div>`,18),e=[p];function c(l,u,k,r,i,d){return a(),s("div",null,e)}var f=n(o,[["render",c]]);export{y as __pageData,f as default};
